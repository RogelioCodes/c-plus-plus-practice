#include<iostream>
#include<fstream>
#include<string>
#include <stdlib.h>  //exit(1)

using namespace std;

ifstream fin;

// INSTRUCTION:  Complete all ** parts.
// You may use any method to connect this file to scanner.cpp
// that you had written.
// You can copy scanner.cpp here by cp ../ScannerFiles/scanner.cpp . and do
// cat scanner.cpp parser.cpp > myparser.cpp
// -----------------------------------------------------

//=================================================
// File parser.cpp written by Group Number: 9
//=================================================


//=====================================================
//  scanner function written by: Group Number: 9
//=====================================================


// -----  Tables -------------------------------------

// ** Update the tokentype to be WORD1, WORD2, PERIOD, ERROR, EOFM, etc.
enum tokentype { ERROR, WORD1, WORD2, PERIOD,
		 VERB, VERBPAST, VERBNEG, VERBPASTNEG,
		 IS,WAS,
		 OBJECT, SUBJECT, DESTINATION,
		 PRONOUN, CONNECTOR, EOFM };

// ** string tokenName[30] = { }; for the display names oftokens - must be in the same order as the tokentype.

string tokenName[30] = { "ERROR", "WORD1", "WORD2", "PERIOD",
			 "VERB", "VERBPAST", "VERBNEG", "VERBPASTNEG",
			 "IS", "WAS",  
			 "OBJECT", "SUBJECT", "DESTINATION",
			 "PRONOUN", "CONNECTOR", "EOFM" };

// ** Need the reservedwords table to be set up here.
// ** Do not require any file input for this.
// ** a.out should work without any additional files.
//rWords = reservedWords
string rWords[30][2] = {
  {"masu",         ""},
  {"masen",        ""},
  {"mashita",      ""},
  {"masendeshita", ""},
  {"desu",         ""},
  {"deshita",      ""},
  {"o",            ""},
  {"wa",           ""},
  {"ni",           ""},
  {"watashi",      "I/me"},
  {"anata",        "you"},
  {"kare",         "he/him"},
  {"kanojo",       "she/her"},
  {"sore",         "it"},
  {"mata",         "Also"},
  {"soshite",      "Then"},
  {"shikashi",     "However"},
  {"dakara",       "Therefore"},
  {"eofm",         ""}
};

tokentype rWordsType[30] = { VERB, VERBNEG, VERBPAST, VERBPASTNEG,
			     IS, WAS, OBJECT, SUBJECT, DESTINATION,
			     PRONOUN, PRONOUN, PRONOUN, PRONOUN, PRONOUN,
			     CONNECTOR, CONNECTOR, CONNECTOR, CONNECTOR,
			              EOFM
};



// --------- DFAs ---------------------------------

// ** MYTOKEN DFA to be replaced by the WORD DFA
// ** Done by: Sean Gow
// ** RE: ( (a|e|i|E|I|o|u) | (a|e|i|E|I|o|u)n | {[(b|g|h|k|m|n|p|r)y) | (d|j|w|y|z)  | (ch)| (sh) | (ts)] [(a|e|i|E|I|o|u)| (a|e|i|E|I|o|u)n] } )^+
bool word (string s)
{
  int state = 0;
  int charpos = 0;

  while (s[charpos] != '\0')
    {
      // state 0
      if (state==0){
	//to qv state 1
	if ( s[charpos]== 'a'|| s[charpos]== 'e'|| s[charpos]== 'i'||s[charpos]== 'E'|| s[charpos]== 'I'|| s[charpos]== 'o'|| s[charpos]== 'u')
	  state=1;
	//to qy state 2
	else if  ( s[charpos]== 'b'|| s[charpos]== 'g'|| s[charpos]== 'h'|| s[charpos]== 'k'|| s[charpos]== 'm'|| s[charpos]== 'n'|| s[charpos]== 'p'|| s[charpos]== 'r')
	  state=2;
	//to qsa state 3
	else  if ( s[charpos]=='d'|| s[charpos]== 'j'|| s[charpos]== 'w'|| s[charpos]== 'y'|| s[charpos]== 'z')
	  state=3;
	//to qc state 4
	else  if ( s[charpos]== 'c')
	  state=4;
	// to qs state 5
	else if ( s[charpos]== 's')
	  state=5;
	//to qt state 6
	else  if (s[charpos]=='t')
	  state=6;
	//no valid transition
	else return(false);
      }//end state 0;
      //from qv state 1,  vowels
      else if(state==1){
	//to qn state 7
	if(s[charpos]=='n')
	  state=7;
	//loop at qv state 1
	else  if ( s[charpos]== 'a'|| s[charpos]== 'e'|| s[charpos]== 'i'||s[charpos]== 'E'|| s[charpos]== 'I'|| s[charpos]== 'o'|| s[charpos]== 'u')
	  state=1;
	//to qy state,  n removed from qsa transition from vowel state,  qv-n->qsa-y->qsa ==  qv-n->qn-y->qsa  or qv-n->qsa-vowel->qv == qv-n->qn-vowel->qv
	else if  ( s[charpos]== 'b'|| s[charpos]== 'g'|| s[charpos]== 'h'|| s[charpos]== 'k'|| s[charpos]== 'm'||  s[charpos]== 'p'|| s[charpos]== 'r')
	  state=2;
	//to qsa state 3
	else if ( s[charpos]=='d'|| s[charpos]== 'j'|| s[charpos]== 'w'|| s[charpos]== 'y'|| s[charpos]== 'z')
	  state=3;
	//to qc state 4
	else if ( s[charpos]== 'c')
	  state=4;
	//to qs state 5
	else if ( s[charpos]== 's')
	  state=5;
	//to qt state 6
	else if (s[charpos]=='t')
	  state=6;
	//no valid transition
	else return(false);
      }//end state 1;
      //from qn, vowel n   state 7
      else if(state==7){
	//to qv state 1
	if ( s[charpos]== 'a'|| s[charpos]== 'e'|| s[charpos]== 'i'||s[charpos]== 'E'|| s[charpos]== 'I'|| s[charpos]== 'o'|| s[charpos]== 'u')
	  state=1;
	//to qy state 2
	else if  ( s[charpos]== 'b'|| s[charpos]== 'g'|| s[charpos]== 'h'|| s[charpos]== 'k'|| s[charpos]== 'm'||  s[charpos]=='n' || s[charpos]== 'p'|| s[charpos]== 'r')
	  state=2;
	//to qsa state 3
	else if ( s[charpos]=='d'|| s[charpos]== 'j'|| s[charpos]== 'w'|| s[charpos]== 'y'|| s[charpos]== 'z')
	  state=3;
	//to qc state 4
	else if ( s[charpos]== 'c')
	  state=4;
	//to qs state 5
	else if ( s[charpos]== 's')
	  state=5;
	//to qt state 6
	else if (s[charpos]=='t')
	  state=6;
	// to invalid state
	else return(false);
      }//end vowel n state
      //from qy state 2
      else if (state==2){
	//to qsa 3
	if (s[charpos]=='y')
	  state=3;
	//to qv 1
	else if (s[charpos]=='a'||s[charpos]=='e'||s[charpos]=='i'||s[charpos]=='o'||s[charpos]=='u'||s[charpos]== 'E'|| s[charpos]== 'I')
	  state=1;
	//invalid
	else return(false);
      }
      //from qsa state 3 to qv,vowel state 1
      else if (state==3 && (s[charpos]=='a'||s[charpos]=='e'||s[charpos]=='i'||s[charpos]== 'E'|| s[charpos]== 'I'||s[charpos]=='o'||s[charpos]=='u'))
	state=1;
      //from qc state 4
      else if (state==4){
	//to qsa state
	if (s[charpos]=='h')
	  state=3;
	//invalid
	else return(false);
      }
      //from qs state 5
      else if (state==5){
	//to qsa state 3
	if (s[charpos]=='h')
	  state=3;
	//to qv state 1
	else if (s[charpos]=='a'||s[charpos]=='e'||s[charpos]=='i'||s[charpos]== 'E'|| s[charpos]== 'I'||s[charpos]=='o'||s[charpos]=='u')
	  state=1;
	//invalid
	else return(false);
      }
      //from qt state 6
      else if (state==6){
	//to qsa state 3
	if (s[charpos]=='s')
	  state=3;
	//to qv state 1
	else if (s[charpos]=='a'||s[charpos]=='e'||s[charpos]=='i'||s[charpos]== 'E'|| s[charpos]== 'I'||s[charpos]=='o'||s[charpos]=='u')
	  state=1;
	//invalid
	else return(false);

      }//end of states
      //not valid state
      else return(false);

      charpos++;
    }//end of while

  // where did I end up????
  //state 1 and state 7 are valid
  if ((state == 1 )||( state==7)) return(true);  // end in a final state
  else return(false);
}

// ** Add the PERIOD DFA here
// ** Done by: Rogelio Cordova
bool period(string s) {

  int state = 0 ;
  int pos = 0 ;

  while(s[pos]!= '\0' ) {
    if (state == 0 && (s[pos] == '.'))
      state = 1;
    else
      return (false);
    pos++;}

  if (state == 1) return (true);
  else return (false);
}




/*********************/  //old scanner function missing lexical error output




// Scanner processes only one word each time it is called
// Gives back the token type and the word itself
// ** Done by: Rogelio Cordova
int scanner(tokentype& a, string& w)
{
  bool res = false ; //reserved or not reserved

  fin >> w ; // ** Grab the next word from the file via fin
  if(DEBUG) cout<< "Scanner called using word: "<<w<<endl; 
  if(w == "eofm"){ a=EOFM;   //return EOFM for end of story marker
    return 0 ; } // 1. If it is eofm, return right now.
  if(period(w))
    a = PERIOD ;
  else if (word(w)){
    for(int x = 0 ; x < 30 ; x++) {
      if(w == rWords[x][0]){ //words are checked against reserved word list
        a = rWordsType[x] ;
        res = true ;
        break ;
      }}
    if(!res){ //if the words are not reserved
      if(w[w.length()-1] == 'I' || w[w.length() - 1] == 'E')
	a = WORD2 ;
      else
	a = WORD1 ;
    }}
  else{ a = ERROR ; //Both DFAs failed
    cout<<"Lexical Error: "<<w<<" is not a valid token"<<endl;
    return - 1 ;
  }
}
//the end of scanner
  /*
  2. Call the token functions one after another (if-then-else)
     And generate a lexical error message if both DFAs failed.
     Let the token_type be ERROR in that case.

  3. Then, make sure WORDs are checked against the reservedwords list
     If not reserved, token_type is WORD1 or WORD2.

  4. Return the token type & string  (pass by reference)
  */

//the end of scanner





// INSTRUCTION:  Complete all ** parts.
// You may use any method to connect this file to scanner.cpp
// that you had written.
// You can copy scanner.cpp here by cp ../ScannerFiles/scanner.cpp . and do
// cat scanner.cpp parser.cpp > myparser.cpp
// -----------------------------------------------------

//=================================================
// File parser.cpp written by Group Number: 9
//=================================================

// ----- Utility and Globals -----------------------------------
//non-terminal void functions
void story();
void S();
void after_subject();
void after_noun();
void after_object();
void noun();
void verb();
void be();
void tense();

tokentype next_token();
bool match(tokentype wanted);
bool syntaxerror1(tokentype expected, string saved_lexme);
bool syntaxerror2(tokentype expected, string saved_lexme);

string saved_lexme;
bool  token_available = false;
tokentype saved_token;


//switch for EC
bool DEBUG=true; // * enable/disable tracing messages   *works*



// ** Need syntaxerror1 and syntaxerror2 functions (each takes 2 args)
// ** Be sure to put the name of the programmer above each function
// i.e. Done by:Rogelio Cordova


bool syntaxerror1(tokentype expected, string saved_lexme){
  cout << "SYNTAX ERROR: expected "<< tokenName[expected] <<"but found "<<saved_lexme << endl;

  exit(1);//quit program
}


bool syntaxerror2( string function, string saved_lexme){

  cout << "SYNTAX ERROR: unexpected \""<< saved_lexme <<"\" found in "<< function << endl;

  exit(1);//quit program
}



// ** Need the updated match and next_token (with 2 global vars)
// ** Be sure to put the name of the programmer above each function
// i.e. Done by: Sean Gow

//from wk 9
bool match(tokentype expected ){
  if(next_token() != expected) // if the next token does not match
    { syntaxerror1(expected, saved_lexme); } //generates syntax error message by calling the function "syntaxerror1" 
  else{
    if (DEBUG)  cout<<"Matched "<<tokenName[expected]<<endl;
    token_available = false; // sets token to not available, also does this mess with the debug at all?--Vince
  }
}

// call scanner and check next token
// i.e. Done by:
tokentype next_token()
{
  if (!token_available)   // if there is no saved token yet
    { scanner(saved_token, saved_lexme);  // call scanner to grab a new token
      if(DEBUG) cout<< "Scanner called using word: "<<saved_lexme<<endl;

      token_available = true;  // mark that fact that you have saved it
      
      /* output in scanner? */
      //check for lexical error
      if (saved_token==ERROR){
        cout<<"Lexical Error: "<<saved_lexme<<" is not a valid token"<<endl;
      }    
    }  
  return saved_token;    // return the saved token
}

// ----- RDP functions - one per non-term -------------------

// ** Make each non-terminal into a function here
// ** Be sure to put the corresponding grammar rule above each function
// i.e. Grammar:
// ** Be sure to put the name of the programmer above each function
// i.e. Done by:


/*  grammar factor rules
 * <story> ::= <s> { <s> }  // stay in the loop as long as a possible start
                           // of <s> is the next_token  (note it can be CONNECTOR or WORD1 or PRONOUN)
			   *  <s>::=[CONNECTOR] <noun> SUBJECT <after subject>
			   * <after subject>::= <verb> <tense> PERIOD | <noun> <after noun>
			   * <after noun>::= <be> PERIOD| DESTINATION <verb> <tense> PERIOD |OBJECT <after object>
			   * <after object>::= <verb> <tense> PERIOD|<noun> DESTINATION <verb> <tense> PERIOD
			   * <noun>::= WORD1|PRONOUN
			   * <verb>::=WORD2
			   * <be>::= IS|WAS
			   * <tense>::=VERBPAST|VERBPASTNEG|VERB|VERBNEG
 *
 */
// <story> ::= <s> { <s> }
// i.e. Done by: Sean Gow
void story(){
  if (DEBUG)   cout<<"Processing <story>"<<endl<<endl;
  //launch first s
  S();

  //loop for optional S()

  while(true){
    switch(next_token()){
    case CONNECTOR:
    case WORD1:
    case PRONOUN:
      S(); //go to S()for above 3 cases
      break;
    case EOFM://end of story marker
      cout<<endl<<"Successfully parsed <story>."<<endl;
      return;
    default:
      syntaxerror2("<story>", saved_lexme);
    }
  }



}
// <S>::=[CONNECTOR] <noun> SUBJECT <after subject>
// i.e. Done by: Sean Gow
void S(){
  if (DEBUG)   cout<<"Processing <S>"<<endl;
  //check for optional connector, then match it
  if (next_token()==CONNECTOR)
    match(CONNECTOR);
  //call noun
  noun();
  //match subject
  match(SUBJECT);
  //call after subject
  after_subject();
}
// <noun>::= WORD1|PRONOUN
void noun(){
  if (DEBUG)   cout<<"Processing <noun>"<<endl;
  switch(next_token())   {
  case WORD1:
    match(WORD1);
    break;
  case PRONOUN:
    match(PRONOUN);
    break;
  default: //if none of cases apply
    syntaxerror2("<noun>", saved_lexme);
  }
}

//<verb>::=WORD2
// i.e. Done by: Sean Gow
void verb(){
  if (DEBUG)     cout<<"Processing <verb>"<<endl;
  match(WORD2);
}
//<be>::= IS|WAS
// i.e. Done by: Vincent Harris
void be(){
  if (DEBUG)  cout<<"Processing <be>"<<endl;

  switch(next_token()){
  case IS:
    match(IS);
    break;
  case WAS:
    match(WAS);
    break;
  default: //if none of cases apply
    syntaxerror2("<be>", saved_lexme);
  }

}
//<after subject>::= <verb> <tense> PERIOD | <noun> <after noun>
// i.e. Done by: Vincent Harris /Sean Gow
void after_subject(){
  if (DEBUG)   cout<<"Processing <afterSubject>"<<endl;

  switch(next_token()){
  case WORD2:
    verb();
    tense();
    match(PERIOD);
    break;
    //    case NOUN =WORD1|PRONOUN
  case WORD1:
  case PRONOUN:
    noun();
    after_noun();
    break;
  default: //if none of cases apply
    syntaxerror2("<afterSubject>", saved_lexme);

  }

}

// <after noun>::= <be> PERIOD| DESTINATION <verb> <tense> PERIOD |OBJECT <after object>
// i.e. Done by: Rogelio Cordova /Sean Gow
void after_noun(){
  if (DEBUG)   cout<<"Processing <afterNoun>"<<endl;

  switch(next_token()){
    //    case BE:   = IS|WAS
  case IS:
  case WAS:
    be();
    match(PERIOD);
    break;
  case DESTINATION:
    match(DESTINATION);
    verb();
    tense();
    match(PERIOD);
    break;
  case OBJECT:
    match(OBJECT);
    after_object();
    break;
  default: //if none of cases apply
    syntaxerror2("<afterNoun>", saved_lexme);

  }
}


// <tense>::=VERBPAST|VERBPASTNEG|VERB|VERBNEG
//looks at next token and checks if it falls into any of these cases
// i.e. Done by: Sean Gow
void tense(){
  if (DEBUG)  cout<<"Processing <tense>"<<endl;
  switch(next_token()){
  case VERBPAST:
    match(VERBPAST);
    break;
  case VERBPASTNEG:
    match(VERBPASTNEG);
    break;
  case VERB:
    match(VERB);
    break;
  case VERBNEG:
    match(VERBNEG);
    break;
  default: // if none of the cases apply
    syntaxerror2("<tense>", saved_lexme);
  }

}
// <after object>::= <verb> <tense> PERIOD|<noun> DESTINATION <verb> <tense> PERIOD
//looks at next token and checks if it falls into any of these cases
// i.e. Done by: Rogelio Cordova
void after_object(){
  if (DEBUG)   cout<<"Processing <afterObject>"<<endl;

  switch(next_token()){
  case WORD2:
    verb();
    tense();
    match(PERIOD);
    break;
    //noun
  case WORD1:
  case PRONOUN:
    noun();
    match(DESTINATION);
    verb();
    tense();
    match(PERIOD);
    break;
  default: //if none of cases apply
    syntaxerror2("<afterObject>", saved_lexme);
  }
}

//---------------------------------------

// The new test driver to start the parser
// Done by:  **Vincent Harris
int main()
{
  string filename;
  cout << "Enter the input file name: ";
  cin >> filename;
  fin.open(filename.c_str());


  //** calls the <story> to start parsing
  story();

  //** closes the input file

  fin.close();
}// end
//** require no other input files!
//** syntax error EC requires producing errors.text of messages
