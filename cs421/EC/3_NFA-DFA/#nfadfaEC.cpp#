#include<iostream>
#include<fstream>
#include<vector>
#include<string>
#include<queue>
#include <unordered_set>
#include "Transition.h"
#include "TransitionTable.h"
#include "Utilities.h"
using namespace std;
using Utilities::split


//============================================
// CS421 Extra Credit by : **
// transform NFA into DFA  (nfa.txt into dfa.txt)
//=============================================

// States allowed are 0 through 9
// Arrows allowed are a through e
#define LINE_END_MARKER = -1

TransitionTable dfa;
TransitionTable nfa;
unordered_set<char> alphas;

ofstream fout ("dfa.txt", ios::out);  // output stream

// Transitions of the NFA (10 states and 5 chars)
// Every slot contains a vector of destination states
vector<int> NFA[10][5];
int maxState;      // the highest state indicated in nfa.txt first line

// vector of new states in DFA (each state name is a string)
vector<string> DFAstates; 


/* ALGORITHM:
    Read in nfa.txt into NFA.
    Start with DFA state "0" 
    While there are more DFAstates 
      For each arrow character, find all destinations
      in the NFA and create a new DFA state name 
      with the detinations. Add it to DFAstates.
      Output the DFA transition to dfa.txt
*/ 

// ----- Your utility functions ----------------------------------------
// Such as display and converstion functions
string makeCompositeState(vector<int> & states){
string state = "";
bool isFirst = true;

for(int stateNum : states){
if(!isFirst){state.push_back(' ');}
isFirst = false;
state.append(std::to_string(stateNum));}

return state;}

void alphabet(vector<Transition> & transitions){
for(Transition transition : transitions)
  for(char ch : transition.transitionChars)
    alphas.insert(ch);}








// ------------- Storing the NFA ---------------------- 

// Reads nfa.txt to build the NFA data structure


  // **** put code here *******************

  fin.close();
}



// --------------- Forming the DFA -------------------

// adds a state to DFA if it is new
void addNewState(string state)
{
  // *** put code here ****************
}


// Main Driver
int main()
{ 

  cout << "Given your NFA in nfa.txt, this will produce the DFA in dfa.txt." << endl;
  cout << "State numbers must be 0 ... 9" << endl;
  cout << "Arrow labels can be anything from a .. e" << endl << endl;

  buildnfa();
  // NFA has been stored.

  addNewState("0");  // start with state 0 in DFA

  while (x < DFA.size() ) // for each DFA state
    { 
      // ** Display the current DFA state S (string of component states)
      // ** For each possible arrow label a..e
         // Go through each component state of S,
             // grab all destinations from NFA and
             // append the destinations to DS.
             // If DS has been formed,     
                // display it and also send it to dfa.txt
                // and DS is added to DFA. 
    }
  fout << "Any state with the original final state number is final" << endl;
  fout.close();

}//the end

 
