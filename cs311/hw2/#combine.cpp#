#include <iostream>
#include <math.h>
#include <vector>
using namespace std;

#include <iostream>
#include <vector>
#include <string>
#include<algorithm>
using namespace std;

//prototype for Combine function

void combine( vector<int> A, vector<int> &B, vector<int> &R);
int main()
{
  //vectors of integers L1, L2 and L3
  vector <int> L1, L2, L3 ;
 
  int size; // size for future loops
  int num=0, num2=0; //integers that the user will enter for vectors L1 and L2
  bool done = true ; 
  int i = 0 ; int x = 0 ; 
  //user enters the size they want
  cout << "Enter integers in increasing order for vector 1. Press -100 to exit." << endl;
  while(done)
    {
      i++ ; 
      cout << "Enter integer "  << i << ": " ;
      cin >> num;
      if(num==-100) 
	done = false ; 
      else 
      L1.push_back(num); //pushed into vector L1
      
    }

  done = true ; 
 
  cout << "Enter integers in increasing order for vector 2. Press -100 to exit." << endl;
 while(done)
    {

      x++ ; 
      cout << "Enter integer " << x << ": " ;
      cin >> num;
      if(num==-100)
        done = false ;
      else
	L2.push_back(num); //pushed into vector L1                                                                                                                                                         

    }
 combine(L1, L2,L3) ;

}

void combine(vector<int> &A, vector<int> &B, vector<int> &R)
{
  int ia =1 ; 
  int ib = 1 ; 
  int ir = 1 ; 
  cout << "here 1 " << endl ; 
  if(A[ia] < B[ib])
    {
      cout << "Here 2" << endl ; 

     R.insert(R.begin(),A.begin(),A.end()) ; 
            R[ir]= A[ia] ;     
      ia = ia+1 ; 
      cout << "Here 3" << endl ; 
    }
  else 
    {
      cout << "Here 4 " << endl ; 
    
      R.insert(R.end(),B.begin(),B.end()) ;
      R[ir] = B[ib];  
      ib = ib + 1; // get the B element   
      ir = ir + 1;
      cout << "Here 5" << endl ; 
    }
  if(A.size() != 0)
    {
  cout << "hallo"  ;
  for(int i = 0 ; i < A.size() ; i++)
    cout << A[i] << endl ;
    }
  else cout << "yes" << endl ; 
  for(int i = 0 ; i < R.size() ; i++)
    cout << R[i] << endl ; 
}
   
/*
ia = 1; // index for A
ib = 1; // index for B
ir = 1; // index for R
Until you run out of elements in A or run out of elements in B:
if A[ia] < B[ib] 
then R[ir] = A[ia]; ia = ia + 1; // get the A element
 else                            
R[ir] = B[ib]; ib = ib + 1; // get the B element
ir = ir + 1;
After the loop:
if you still have A elements left, copy them into R
else copy the remaining B elements into R.*/
//prototype for Combine function
void Combine(vector <int> A,vector <int> B, vector <int>& R);
int main()
{
  //vectors of integers named L1, L2 and L3
  vector <int> L1;
  vector <int> L2;
  vector <int> L3;

  //used to check to see if the trigger for ending the while-loop was entered
  bool done = true;

  //asks users to enter numbers, and when they enter -1, it will end the loop
  cout << "Please enter integers in increasing order for vector 1. Enter -1 when done. " << endl;
  while(done)
    {
      int num;//variable for number entry
      cin >> num; // number entry
      if (num == -1) //checks to see if the entry is equal to the trigger
        done = false; // if it is, set done to false and ends the loop

      else
        L1.push_back(num); // pushed the entry into the vector
    }

  //does the same thing above, but for the second vector
  cout << "Please enter integers in increasing order for vector 2. Enter -1 when done. " << endl;
  done = true;
  while(done)
    {
      int num2;
      cin >> num2;
      if(num2 == -1)
        done = false;

      else
        L2.push_back(num2);
    }

  //jumps to the combine function
  Combine( L1 ,L2 ,L3 );

  //displays all the elements in L3
  for(int i=0; i < L3.size() ; i++)
    cout << L3[i]<< " " ;

  return 0;
}


void Combine(vector <int> A,vector <int> B, vector <int>& R)
{
  int ia = 0; // index for A
  int ib = 0; // index for B

  //while the ia/ib is less than the size of A.size and B.size respectively
  while( ia < A.size() && ib < B.size() )
    {
      if( A[ia] < B[ib] ) //while the contents in A[ia] is less than B[ib]
	{
	  R.push_back(A[ia]); // push A[ia] into Vector R
	  ia= ia+1; // increment ia by 1
	}

      else
	{
	  R.push_back(B[ib]);  // push back B[ib] into vector R
	  ib= ib+1; // increment ib by 1
        }

    }

  if(ia== A.size() ) // if ia is equal to the size of vector A
    {
      while(ib < B.size()) // while ib is less than the size of vector B
	{
	  R.push_back(B[ib]); // push back B[ib] into vector R
	  ib=ib+1;    // increment ib by 1
	}
    }

  else if( ib== B.size()) // if ib is equal to the size of vector B
    {
      while(ia< A.size() ) // while ia is less than the size of vector A
	{
	  R.push_back(A[ia]); // pushes the content of A[ia] into vector R
	  ia=ia+1; // increment ia by 1
	}
    }
}